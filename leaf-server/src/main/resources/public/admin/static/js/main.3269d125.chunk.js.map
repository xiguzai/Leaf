{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["confirm","Action","create","props","data","setData","form","getFieldDecorator","getFieldValue","getFieldsValue","useState","visible","setVisible","editing","setEditing","onClick","e","preventDefault","type","console","log","record","title","okText","okType","cancelText","onOk","fetch","bizTag","method","then","resp","json","status","i","length","splice","Object","assign","success","message","error","onCancel","body","JSON","stringify","headers","Headers","item","description","updateTime","format","Date","okButtonProps","loading","labelCol","span","wrapperCol","onSubmit","Item","label","disabled","value","maxId","step","initialValue","placeholder","CreateForm","createing","setCreateing","reloading","setReloading","fetchData","validateFields","style","marginBottom","layout","rules","required","width","min","err","values","setTimeout","catch","key","push","htmlType","map","App","Array","columns","dataIndex","render","text","useEffect","className","paddingTop","tip","delay","spinning","dataSource","pagination","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+eAgBQA,G,WAAAA,SAmBFC,EAAS,IAAKC,QAAL,EAA2B,SAACC,GAAwB,IACzDC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QADkD,EAEHF,EAAMG,KAA3DC,EAFwD,EAExDA,kBAAmBC,EAFqC,EAErCA,cAAeC,EAFsB,EAEtBA,eAFsB,EAGlCC,oBAAS,GAHyB,mBAGzDC,EAHyD,KAGhDC,EAHgD,OAIlCF,oBAAS,GAJyB,mBAIzDG,EAJyD,KAIhDC,EAJgD,KA2EhE,OACE,8BACE,uBAAGC,QAxEY,SAACC,GAClBA,EAAEC,iBACFL,GAAW,KAsET,QACA,uBAASM,KAAK,aACd,uBAAGH,QAtEc,SAACC,GACpBA,EAAEC,iBACFE,QAAQC,IAAIjB,EAAMkB,QAClBrB,EAAQ,CACNsB,MAAO,qCACPC,OAAQ,MACRC,OAAQ,SACRC,WAAY,KACZC,KALM,WAMJ,OAAOC,MAAM,+BAAD,OAAgCxB,EAAMkB,OAAOO,QAAU,CACjEC,OAAQ,SAEPC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,GAAoB,MAAhBA,EAAKE,OAAgB,CACvB,IAAK,IAAIC,EAAI,EAAGA,EAAI9B,EAAK+B,OAAQD,IAAK,CAEpC,GADa9B,EAAK8B,GACTN,SAAWzB,EAAMkB,OAAOO,OAAQ,CACvCxB,EAAKgC,OAAOF,EAAG,GACf,OAGJ7B,EAAQgC,OAAOC,OAAO,GAAIlC,IAC1B,IAAQmC,QAAQR,EAAKS,cAErB,IAAQC,MAAMV,EAAKS,aAI3BE,SA1BM,iBAmEN,UACA,uBACEpB,MAAM,OACNX,QAASA,EACTe,KA1CW,WACfZ,GAAW,GACX,IAAM6B,EAAON,OAAOC,OAAOnC,EAAMkB,OAAQZ,KACzCkB,MAAM,uBAAwB,CAC5BE,OAAQ,OACRc,KAAMC,KAAKC,UAAUF,GACrBG,QAAS,IAAIC,QAAQ,CACnB,eAAgB,uBAGjBjB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GACJ,GAAoB,MAAhBA,EAAKE,OAAgB,CAEvB,IAFwB,IAChBL,EAAWzB,EAAMkB,OAAjBO,OACCM,EAAI,EAAGA,EAAI/B,EAAMC,KAAK+B,OAAQD,IAAK,CAC1C,IAAMc,EAAO7C,EAAMC,KAAK8B,GACxB,GAAIc,EAAKpB,SAAWA,EAAQ,CAC1BoB,EAAKC,YAAczC,EAAc,eACjCwC,EAAKE,WAAaC,YAAO,IAAIC,KAAQ,uBACrC,OAGJ/C,EAAQgC,OAAOC,OAAO,GAAIlC,IAC1BQ,GAAW,GACX,IAAQ2B,QAAQR,EAAKS,cAErB,IAAQC,MAAMV,EAAKS,SAErB1B,GAAW,OAeX4B,SAZe,WACnB9B,GAAW,IAYPyC,cAAe,CAAEC,QAASzC,IAE1B,uBACE0C,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,IACpBE,SAAU,SAAA1C,GAAC,OAAIA,EAAEC,mBAEjB,sBAAM0C,KAAN,CAAWC,MAAM,UACf,uBAAOC,UAAU,EAAMC,MAAO3D,EAAMkB,OAAOO,UAE7C,sBAAM+B,KAAN,CAAWC,MAAM,SACf,uBAAOC,UAAU,EAAMC,MAAO3D,EAAMkB,OAAO0C,SAE7C,sBAAMJ,KAAN,CAAWC,MAAM,QACf,uBAAOC,UAAU,EAAMC,MAAO3D,EAAMkB,OAAO2C,QAE7C,sBAAML,KAAN,CAAWC,MAAM,eACdrD,EAAkB,cAAe,CAChC0D,aAAc9D,EAAMkB,OAAO4B,aAD5B1C,CAEE,uBAAO2D,YAAY,kBAExB,sBAAMP,KAAN,CAAWC,MAAM,aACf,uBAAOC,UAAU,EAAMC,MAAO3D,EAAMkB,OAAO6B,oBAQjDiB,EAAa,IAAKjE,QAAL,EAA0B,SAACC,GAAuB,IAEjEiE,EAOEjE,EAPFiE,UACAC,EAMElE,EANFkE,aACAjE,EAKED,EALFC,KACAC,EAIEF,EAJFE,QACAiE,EAGEnE,EAHFmE,UACAC,EAEEpE,EAFFoE,aACAC,EACErE,EADFqE,UARgE,EAUpBrE,EAAMG,KAA5CC,EAV0D,EAU1DA,kBAAmBkE,EAVuC,EAUvCA,eAoD3B,OACE,uBACEC,MAAO,CAAEC,aAAc,SACvBC,OAAO,SACPlB,SAAU,SAAA1C,GAAC,OAAIA,EAAEC,mBAEjB,sBAAM0C,KAAN,KACGpD,EAAkB,SAAU,CAC3BsE,MAAO,CAAC,CAAEC,UAAU,EAAMtC,QAAS,yBADpCjC,CAEE,uBAAOmE,MAAO,CAAEK,MAAO,SAAWb,YAAY,aAEnD,sBAAMP,KAAN,KACGpD,EAAkB,QAAS,CAC1B0D,aAAc,EACdY,MAAO,CAAC,CAAEC,UAAU,EAAMtC,QAAS,wBAFpCjC,CAIC,uBAAamE,MAAO,CAAEK,MAAO,SAAWC,IAAK,EAAGd,YAAY,YAGhE,sBAAMP,KAAN,KACGpD,EAAkB,OAAQ,CACzB0D,aAAc,IACdY,MAAO,CAAC,CAAEC,UAAU,EAAMtC,QAAS,uBAFpCjC,CAIC,uBAAamE,MAAO,CAAEK,MAAO,SAAWC,IAAK,EAAGd,YAAY,WAGhE,sBAAMP,KAAN,KACGpD,EAAkB,cAAlBA,CACC,uBAAOmE,MAAO,CAAEK,MAAO,SAAWb,YAAY,kBAGlD,sBAAMP,KAAN,KACE,uBACEzC,KAAK,UACLoC,QAASc,EACTrD,QArEa,SAACC,GACpBA,EAAEC,iBACFwD,GAAe,SAACQ,EAAKC,GACdD,IACH9D,QAAQC,IAAI8D,GACZb,GAAa,GACbc,YAAW,WACTxD,MAAM,uBAAwB,CAC5BE,OAAQ,OACRc,KAAMC,KAAKC,UAAUqC,GACrBpC,QAAS,IAAIC,QAAQ,CACnB,eAAgB,uBAGjBjB,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBoD,OAAM,SAAAH,GAAG,OAAI9D,QAAQC,IAAI,SAAU6D,MACnCnD,MAAK,SAAAC,GACJZ,QAAQC,IAAI,WAAYW,GACJ,MAAhBA,EAAKE,QACPiD,EAAOG,IAAMH,EAAOtD,OACpBsD,EAAOhC,WAAaC,YAAO,IAAIC,KAAQ,uBACvChD,EAAKkF,KAAKJ,GACV7E,EAAQgC,OAAOC,OAAO,GAAIlC,IAC1B,IAAQmC,QAAQR,EAAKS,UAErB,IAAQC,MAAMV,EAAKS,SAErB6B,GAAa,QAEhB,UAyCDkB,SAAS,UAERnB,EAAY,eAAiB,WAGlC,sBAAMT,KAAN,KACE,uBACEzC,KAAK,UACLqE,SAAS,SACTjC,QAASgB,EACTvD,QAjGa,SAACC,GACpBA,EAAEC,iBACFsD,GAAa,GACbY,YAAW,WACTX,IAAY1C,MAAK,SAACC,GACI,MAAhBA,EAAKE,SACHF,EAAK3B,MAAQ2B,EAAK3B,KAAK+B,OAAS,GAClCJ,EAAK3B,KAAKoF,KAAI,SAACxC,GACbA,EAAKqC,IAAMrC,EAAKpB,UAGpBvB,EAAQ0B,EAAK3B,OAEfmE,GAAa,QAEd,OAoFID,EAAY,eAAiB,eA0FzBmB,EA1EO,WAAO,IAAD,EACQ/E,oBAAS,GADjB,mBACnB4D,EADmB,KACRC,EADQ,OAEQ7D,oBAAS,GAFjB,mBAEnB0D,EAFmB,KAERC,EAFQ,OAGF3D,mBAAS,IAAIgF,OAHX,mBAGnBtF,EAHmB,KAGbC,EAHa,KAIpBsF,EAAU,CACd,CACErE,MAAO,SACPsE,UAAW,SACXP,IAAK,UAEP,CACE/D,MAAO,QACPsE,UAAW,QACXP,IAAK,SAEP,CACE/D,MAAO,OACPsE,UAAW,OACXP,IAAK,QAEP,CACE/D,MAAO,cACP+D,IAAK,cACLO,UAAW,eAEb,CACEtE,MAAO,aACP+D,IAAK,aACLO,UAAW,cAEb,CACEtE,MAAO,SACP+D,IAAK,SACLQ,OAAQ,SAACC,EAAWzE,GAAZ,OACN,kBAACpB,EAAD,CAAQ6F,KAAMA,EAAMzE,OAAQA,EAAQjB,KAAMA,EAAMC,QAASA,OAIzDmE,EAAY,kBAAM7C,MAAM,iBAAiBG,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAiBjE,OAfA+D,qBAAU,WACRvB,IACGY,OAAM,SAAAH,GAAG,OAAI9D,QAAQC,IAAI,SAAU6D,MACnCnD,MAAK,SAAAC,GACgB,MAAhBA,EAAKE,SACHF,EAAK3B,MAAQ2B,EAAK3B,KAAK+B,OAAS,GAClCJ,EAAK3B,KAAKoF,KAAI,SAACxC,GACbA,EAAKqC,IAAMrC,EAAKpB,UAGpBvB,EAAQ0B,EAAK3B,YAGlB,IAGD,yBAAK4F,UAAU,OACb,wBAAItB,MAAO,CAAEuB,WAAY,UAAzB,cACA,kBAAC9B,EAAD,CACEC,UAAWA,EACXC,aAAcA,EACdjE,KAAMA,EACNC,QAASA,EACTiE,UAAWA,EACXC,aAAcA,EACdC,UAAWA,IAEb,uBAAM0B,IAAI,aAAaC,MAAO,IAAKC,SAAU9B,GAC3C,uBAAOqB,QAASA,EAASU,WAAYjG,EAAMkG,YAAY,OC7U3CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASf,OAAO,kBAAC,EAAD,MAASgB,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnF,MAAK,SAAAoF,GACjCA,EAAaC,kB","file":"static/js/main.3269d125.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Table,\n  Divider,\n  Modal,\n  Spin,\n  message\n} from \"antd\";\nimport \"./App.css\";\nimport { FormComponentProps } from \"antd/lib/form\";\n\nconst { confirm } = Modal;\n\ninterface ActionProps extends FormComponentProps {\n  text: any;\n  record: any;\n  data: Data[];\n  setData: Function;\n}\n\ninterface CreateForm extends FormComponentProps {\n  createing: boolean;\n  setCreateing: Function;\n  data: Data[];\n  setData: Function;\n  reloading: boolean;\n  setReloading: Function;\n  fetchData: Function;\n}\n\nconst Action = Form.create<ActionProps>()((props: ActionProps) => {\n  const { data, setData } = props;\n  const { getFieldDecorator, getFieldValue, getFieldsValue } = props.form;\n  const [visible, setVisible] = useState(false);\n  const [editing, setEditing] = useState(false);\n  const handleEdit = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    e.preventDefault();\n    setVisible(true);\n  };\n  const handleDelete = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n    e.preventDefault();\n    console.log(props.record);\n    confirm({\n      title: \"Do you Want to delete these items?\",\n      okText: \"Yes\",\n      okType: \"danger\",\n      cancelText: \"No\",\n      onOk() {\n        return fetch(`/admin/allocs/delete?bizTag=${props.record.bizTag}`, {\n          method: \"POST\"\n        })\n          .then(resp => resp.json())\n          .then(resp => {\n            if (resp.status === 200) {\n              for (let i = 0; i < data.length; i++) {\n                const item = data[i];\n                if (item.bizTag === props.record.bizTag) {\n                  data.splice(i, 1);\n                  break;\n                }\n              }\n              setData(Object.assign([], data));\n              message.success(resp.message);\n            } else {\n              message.error(resp.message);\n            }\n          });\n      },\n      onCancel() {}\n    });\n  };\n  const handleOk = () => {\n    setEditing(true);\n    const body = Object.assign(props.record, getFieldsValue());\n    fetch(\"/admin/allocs/update\", {\n      method: \"POST\",\n      body: JSON.stringify(body),\n      headers: new Headers({\n        \"Content-Type\": \"application/json\"\n      })\n    })\n      .then(resp => resp.json())\n      .then(resp => {\n        if (resp.status === 200) {\n          const { bizTag } = props.record;\n          for (let i = 0; i < props.data.length; i++) {\n            const item = props.data[i];\n            if (item.bizTag === bizTag) {\n              item.description = getFieldValue(\"description\");\n              item.updateTime = format(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n              break;\n            }\n          }\n          setData(Object.assign([], data));\n          setVisible(false);\n          message.success(resp.message);\n        } else {\n          message.error(resp.message);\n        }\n        setEditing(false);\n      });\n  };\n  const handleCancel = () => {\n    setVisible(false);\n  };\n  return (\n    <span>\n      <a onClick={handleEdit}>Edit</a>\n      <Divider type=\"vertical\" />\n      <a onClick={handleDelete}>Delete</a>\n      <Modal\n        title=\"Edit\"\n        visible={visible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        okButtonProps={{ loading: editing }}\n      >\n        <Form\n          labelCol={{ span: 5 }}\n          wrapperCol={{ span: 16 }}\n          onSubmit={e => e.preventDefault()}\n        >\n          <Form.Item label=\"BizTag\">\n            <Input disabled={true} value={props.record.bizTag} />\n          </Form.Item>\n          <Form.Item label=\"MaxID\">\n            <Input disabled={true} value={props.record.maxId} />\n          </Form.Item>\n          <Form.Item label=\"Step\">\n            <Input disabled={true} value={props.record.step} />\n          </Form.Item>\n          <Form.Item label=\"Description\">\n            {getFieldDecorator(\"description\", {\n              initialValue: props.record.description\n            })(<Input placeholder=\"Description\" />)}\n          </Form.Item>\n          <Form.Item label=\"UpateTime\">\n            <Input disabled={true} value={props.record.updateTime} />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </span>\n  );\n});\n\nconst CreateForm = Form.create<CreateForm>()((props: CreateForm) => {\n  const {\n    createing,\n    setCreateing,\n    data,\n    setData,\n    reloading,\n    setReloading,\n    fetchData\n  } = props;\n  const { getFieldDecorator, validateFields } = props.form;\n\n  const handleReload = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    e.preventDefault();\n    setReloading(true);\n    setTimeout(() => {\n      fetchData().then((resp: any) => {\n        if (resp.status === 200) {\n          if (resp.data && resp.data.length > 0) {\n            resp.data.map((item: Data) => {\n              item.key = item.bizTag;\n            });\n          }\n          setData(resp.data);\n        }\n        setReloading(false);\n      });\n    }, 500);\n  };\n  const handleSubmit = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    e.preventDefault();\n    validateFields((err, values) => {\n      if (!err) {\n        console.log(values);\n        setCreateing(true);\n        setTimeout(() => {\n          fetch(\"/admin/allocs/create\", {\n            method: \"POST\",\n            body: JSON.stringify(values),\n            headers: new Headers({\n              \"Content-Type\": \"application/json\"\n            })\n          })\n            .then(resp => resp.json())\n            .catch(err => console.log(\"Error:\", err))\n            .then(resp => {\n              console.log(\"Success:\", resp);\n              if (resp.status === 200) {\n                values.key = values.bizTag;\n                values.updateTime = format(new Date(), \"yyyy-MM-dd HH:mm:ss\");\n                data.push(values);\n                setData(Object.assign([], data));\n                message.success(resp.message);\n              } else {\n                message.error(resp.message);\n              }\n              setCreateing(false);\n            });\n        }, 500);\n      }\n    });\n  };\n  return (\n    <Form\n      style={{ marginBottom: \"0.5em\" }}\n      layout=\"inline\"\n      onSubmit={e => e.preventDefault()}\n    >\n      <Form.Item>\n        {getFieldDecorator(\"bizTag\", {\n          rules: [{ required: true, message: \"Please input BizTag\" }]\n        })(<Input style={{ width: \"200px\" }} placeholder=\"BizTag\" />)}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"maxId\", {\n          initialValue: 1,\n          rules: [{ required: true, message: \"Please input MaxID\" }]\n        })(\n          <InputNumber style={{ width: \"200px\" }} min={1} placeholder=\"MaxID\" />\n        )}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"step\", {\n          initialValue: 2000,\n          rules: [{ required: true, message: \"Please input Step\" }]\n        })(\n          <InputNumber style={{ width: \"200px\" }} min={1} placeholder=\"Step\" />\n        )}\n      </Form.Item>\n      <Form.Item>\n        {getFieldDecorator(\"description\")(\n          <Input style={{ width: \"200px\" }} placeholder=\"Description\" />\n        )}\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          loading={createing}\n          onClick={handleSubmit}\n          htmlType=\"submit\"\n        >\n          {createing ? \"Createing...\" : \"Create\"}\n        </Button>\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"default\"\n          htmlType=\"button\"\n          loading={reloading}\n          onClick={handleReload}\n        >\n          {reloading ? \"Reloading...\" : \"Reload\"}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n});\n\ninterface Data {\n  key: string;\n  bizTag: string;\n  maxId: number;\n  step: number;\n  description: string | null | undefined;\n  updateTime: string;\n}\n\nconst App: React.FC = () => {\n  const [reloading, setReloading] = useState(false);\n  const [createing, setCreateing] = useState(false);\n  const [data, setData] = useState(new Array<Data>());\n  const columns = [\n    {\n      title: \"BizTag\",\n      dataIndex: \"bizTag\",\n      key: \"bizTag\"\n    },\n    {\n      title: \"MaxID\",\n      dataIndex: \"maxId\",\n      key: \"maxId\"\n    },\n    {\n      title: \"Step\",\n      dataIndex: \"step\",\n      key: \"step\"\n    },\n    {\n      title: \"Description\",\n      key: \"description\",\n      dataIndex: \"description\"\n    },\n    {\n      title: \"UpdateTime\",\n      key: \"updateTime\",\n      dataIndex: \"updateTime\"\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      render: (text: any, record: any) => (\n        <Action text={text} record={record} data={data} setData={setData} />\n      )\n    }\n  ];\n  const fetchData = () => fetch(\"/admin/allocs\").then(resp => resp.json());\n\n  useEffect(() => {\n    fetchData()\n      .catch(err => console.log(\"Error:\", err))\n      .then(resp => {\n        if (resp.status === 200) {\n          if (resp.data && resp.data.length > 0) {\n            resp.data.map((item: Data) => {\n              item.key = item.bizTag;\n            });\n          }\n          setData(resp.data);\n        }\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ paddingTop: \"0.5em\" }}>Leaf Admin</h1>\n      <CreateForm\n        createing={createing}\n        setCreateing={setCreateing}\n        data={data}\n        setData={setData}\n        reloading={reloading}\n        setReloading={setReloading}\n        fetchData={fetchData}\n      />\n      <Spin tip=\"Loading...\" delay={100} spinning={reloading}>\n        <Table columns={columns} dataSource={data} pagination={false} />\n      </Spin>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}